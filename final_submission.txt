if (!(keyBegin < keyEnd)) return;

auto itLow = m_map.lower_bound(keyBegin);
auto itHigh = m_map.lower_bound(keyEnd);

bool isLowMatch = (itLow == m_map.begin()) ? (m_valBegin == val) : (std::prev(itLow)->second == val);
bool isHighMatch = (itHigh == m_map.begin()) ? (m_valBegin == val) : (std::prev(itHigh)->second == val);

if (isLowMatch && (itHigh == m_map.end() || itHigh->first != keyEnd || itHigh->second == val)) {
    return;
}

if (!isLowMatch) {
    itLow = m_map.insert_or_assign(keyBegin, val).first;
}

if (itHigh == m_map.end() || itHigh->first != keyEnd) {
    if (!isHighMatch) {
        m_map[keyEnd] = itHigh == m_map.end() ? m_valBegin : itHigh->second;
    }
}

if (itLow != m_map.end()) {
    m_map.erase(std::next(itLow), itHigh);
}

if (itLow != m_map.begin() && std::prev(itLow)->second == val) {
    m_map.erase(itLow);
}

if (itHigh != m_map.end() && itHigh->second == m_map[keyEnd]) {
    m_map.erase(keyEnd);
} 


2-----------------------

if (keyBegin >= keyEnd) return;

auto lowerBound = m_map.lower_bound(keyBegin);
auto upperBound = m_map.lower_bound(keyEnd);

bool isLowerBoundMatching = (lowerBound == m_map.begin()) ? (m_valBegin == val) : (std::prev(lowerBound)->second == val);
bool isUpperBoundMatching = (upperBound == m_map.begin()) ? (m_valBegin == val) : (std::prev(upperBound)->second == val);

if (isLowerBoundMatching && (upperBound == m_map.end() || upperBound->first != keyEnd || upperBound->second == val)) {
    return;
}

if (!isLowerBoundMatching) {
    lowerBound = m_map.insert_or_assign(keyBegin, val).first;
}

if (upperBound == m_map.end() || upperBound->first != keyEnd) {
    if (!isUpperBoundMatching) {
        m_map[keyEnd] = upperBound == m_map.end() ? m_valBegin : upperBound->second;
    }
}

if (lowerBound != m_map.end()) {
    m_map.erase(std::next(lowerBound), upperBound);
}

if (lowerBound != m_map.begin() && std::prev(lowerBound)->second == val) {
    m_map.erase(lowerBound);
}

if (upperBound != m_map.end() && upperBound->second == m_map[keyEnd]) {
    m_map.erase(keyEnd);
}